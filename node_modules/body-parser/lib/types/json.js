// body-parser.js

const bytes = require('bytes')
const contentType = require('content-type')
const createError = require('http-errors')
const debug = require('debug')('body-parser:json')
const read = require('../read')
const typeis = require('type-is')

module.exports = json

const FIRST_CHAR_REGEXP = /^[\x20\x09\x0a\x0d]*([^\x20\x09\x0a\x0d])/

function json(options) {
  const opts = options || {}

  const limit = typeof opts.limit !== 'number' ? bytes.parse(opts.limit || '100kb') : opts.limit
  const inflate = opts.inflate !== false
  const reviver = opts.reviver
  const strict = opts.strict !== false
  const type = opts.type || 'application/json'
  const verify = opts.verify || false

  if (verify !== false && typeof verify !== 'function') {
    throw new TypeError('option verify must be function')
  }

  const shouldParse = typeof type !== 'function' ? typeChecker(type) : type

  function parse(body) {
    if (body.length === 0) {
      return {}
    }

    if (strict) {
      const first = firstchar(body)

      if (first !== '{' && first !== '[') {
        debug('strict violation')
        throw createStrictSyntaxError(body, first)
      }
    }

    try {
      debug('parse json')
      return JSON.parse(body, reviver)
    } catch (e) {
      throw normalizeJsonSyntaxError(e, {
        message: e.message,
        stack: e.stack
      })
    }
  }

  return function jsonParser(req, res, next) {
    if (req._body) {
      debug('body already parsed')
      return next()
    }

    req.body = req.body || {}

    if (!typeis.hasBody(req)) {
      debug('skip empty body')
      return next()
    }

    debug('content-type %j', req.headers['content-type'])

    if (!shouldParse(req)) {
      debug('skip parsing')
      return next()
    }

    const charset = getCharset(req) || 'utf-8'
    if (charset.slice(0, 4) !== 'utf-') {
      debug('invalid charset')
      return next(createError(415, 'unsupported charset "' + charset.toUpperCase() + '"', {
        charset: charset,
        type: 'charset.unsupported'
      }))
    }

    read(req, res, next, parse, debug, {
      encoding: charset,
      inflate: inflate,
      limit: limit,
      verify: verify
    })
  }
}

function createStrictSyntaxError(str, char) {
  const index = str.indexOf(char)
  const partial = index !== -1 ? str.substring(0, index) + '#' : ''

  try {
    JSON.parse(partial); /* istanbul ignore next */ throw new SyntaxError('strict violation')
  } catch (e) {
    return normalizeJsonSyntaxError(e, {
      message: e.message.replace('#', char),
      stack: e.stack
    })
  }
}

function firstchar(str) {
  const match = FIRST_CHAR_REGEXP.exec(str)

  return match ? match[1] : undefined
}

function getCharset(req) {
  try {
    return (contentType.parse(req).parameters.charset || '').toLowerCase()
  } catch (e) {
    return undefined
  }
}

function normalizeJsonSyntaxError(error, obj) {
  const keys = Object.getOwnPropertyNames(error)

  for (let i = 0; i < keys.length; i++) {
    const key = keys[i]
    if (key !== 'stack' && key !== 'message') {
      delete error[key]
    }
  }

  error.stack = obj.stack.replace(error.message, obj.message)
  error.message = obj.message

  return error
}

function typeChecker(type) {
  return function checkType(req) {
    return Boolean(typeis(req, type))
  }
}
