/*!
 * ee-first
 * Copyright(c) 2014 Jonathan Ong
 * MIT Licensed
 */

'use strict'

/**
 * Module exports.
 * @public
 */

module.exports = first

/**
 * Get the first event in a set of event emitters and event pairs.
 *
 * @param {array} stuff - An array of arrays where the first element is an event emitter and the rest are events.
 * @param {function} done - A callback function to be called when the event is emitted.
 * @public
 */

function first(stuff, done) {
  if (!Array.isArray(stuff)) throw new TypeError('stuff must be an array')

  for (let i = 0; i < stuff.length; i++) {
    const arr = stuff[i]

    if (!Array.isArray(arr) || arr.length < 2)
      throw new TypeError('each array member must be [ee, events...]')

    const ee = arr[0]

    if (typeof ee !== 'object' || !ee.on)
      throw new TypeError('each ee must be an event emitter')

    for (let j = 1; j < arr.length; j++) {
      const event = arr[j]

      if (typeof event !== 'string')
        throw new TypeError('each event must be a string')

      const fn = listener(event, callback)

      // listen to the event
      ee.on(event, fn)
      // push this listener to the list of cleanups
      cleanups.push({
        ee: ee,
        event: event,
        fn: fn,
      })
    }
  }

  function callback(err, ee, event, args) {
    cleanup()
    done(err, ee, event, args)
  }

  function cleanup() {
    for (let i = 0; i < cleanups.length; i++) {
      const x = cleanups[i]
      x.ee.removeListener(x.event, x.fn)
    }
  }

  const cleanups = []

  function thunk(fn) {
    done = fn
  }

  thunk.cancel = cleanup

  return thunk
}

/**
 * Create the event listener.
 * @private
 */

function listener(event, done) {
