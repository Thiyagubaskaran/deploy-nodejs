/*!
 * etag
 * Copyright(c) 2014-2016 Douglas Christopher Wilson
 * MIT Licensed
 */

'use strict'

/**
 * Module exports.
 * @public
 */

module.exports = etag

/**
 * Module dependencies.
 * @private
 */

const crypto = require('crypto')
const fs = require('fs')
const Stats = fs.Stats

/**
 * Module variables.
 * @private
 */

const toString = Object.prototype.toString

/**
 * Generate an entity tag.
 *
 * @param {Buffer|string} entity
 * @return {string}
 * @private
 */

function entitytag (entity) {
  // If the entity is empty, return a fast-path empty tag
  if (entity.length === 0) {
    return '"0-2jmj7l5rSw0yVb/vlWAYkK/YBwk"'
  }

  // Compute the hash of the entity
  const hash = crypto
    .createHash('sha1')
    .update(entity, 'utf8')
    .digest('base64')
    .substring(0, 27)

  // Compute the length of the entity
  const len = typeof entity === 'string'
    ? Buffer.byteLength(entity, 'utf8')
    : entity.length

  // Return the entity tag
  return '"' + len.toString(16) + '-' + hash + '"'
}

/**
 * Create a simple ETag.
 *
 * @param {string|Buffer|Stats} entity
 * @param {object} [options]
 * @param {boolean} [options.weak]
 * @return {String}
 * @public
 */

function etag (entity, options) {
  // Validate the entity argument
  if (entity == null) {
    throw new TypeError('argument entity is required')
  }

  // Support fs.Stats object
  let isStats = false
  let weak = false

  if (typeof options === 'object') {
    isStats = isstats(entity)
    weak = options.weak === true
  } else {
    // If options is not an object, check if entity is a Stats object
    isStats = isstats(entity)
  }

  // Validate the argument
  if (!isStats && typeof entity !== 'string' && !Buffer.isBuffer(entity)) {
    throw new TypeError('argument entity must be string, Buffer, or fs.Stats')
  }

  // Generate the entity tag
  let tag
  if (isStats) {
    tag = stattag(entity)
  } else {
    tag = entitytag(entity)
  }

  // Return the ETag with the weak flag if specified
  return weak ? 'W/' + tag : tag
}

/**
 * Determine if object is a Stats object.
 *
 * @param {object} obj
 * @return {boolean}
 * @api private
 */

function isstats (obj) {
  // Genuine fs.Stats
  if (typeof Stats === 'function' && obj instanceof Stats) {
    return true
  }

  // Quack quack
  return obj && typeof obj === 'object' &&
    'ctime' in obj && toString.call(obj.ctime) === '[object Date]' &&
    'mtime' in obj && toString.call(obj.mtime) === '[object Date]' &&
    'ino' in obj && typeof obj.ino === 'number' &&
    'size' in obj && typeof obj.size === 'number'
}

/**
 * Generate a tag for a stat.
 *
 * @param {object} stat
 * @return {string}
 * @private
 */

function stattag (stat) {
  const mtime = stat.mtime.getTime().toString(16)
  const size = stat.size.toString(16)

  // Return the stat tag
