// jscs:disable requireUseStrict

const test = require('tape');

const functionBind = require('../implementation');
const getCurrentContext = () => this;

test('functionBind is a function', function (t) {
    t.equal(typeof functionBind, 'function');
    t.end();
});

test('non-functions', function (t) {
    const nonFunctions = [true, false, [], {}, 42, 'foo', NaN, /a/g];
    t.plan(nonFunctions.length);
    nonFunctions.forEach((nonFunction) => {
        try { functionBind.call(nonFunction); } catch (ex) {
            t.ok(ex instanceof TypeError, `throws when given ${nonFunction}`);
        }
    });
    t.end();
});

test('without a context', function (t) {
    t.test('binds properly', function (st) {
        let args, context;
        const namespace = {
            func: functionBind.call(function () {
                args = Array.prototype.slice.call(arguments);
                context = this;
            })
        };
        namespace.func(1, 2, 3);
        st.deepEqual(args, [1, 2, 3]);
        st.equal(context, getCurrentContext());
        st.end();
    });

    // ... rest of the code

});

test('with a context', function (t) {
    t.test('with no bound arguments', function (st) {
        let args, context;
        const boundContext = {};
        const namespace = {
            func: functionBind.call(function () {
                args = Array.prototype.slice.call(arguments);
                context = this;
            }, boundContext)
        };
        namespace.func(1, 2, 3);
        st.equal(context, boundContext, 'binds a context properly');
        st.deepEqual(args, [1, 2, 3], 'supplies passed arguments');
        st.end();
    });

    // ... rest of the code

});

test('bound function length', function (t) {
    t.test('sets a correct length without thisArg', function (st) {
        const subject = functionBind.call(function (a, b, c) { return a + b + c; });
        st.equal(subject.length, 3);
        st.equal(subject(1, 2, 3), 6);
        st.end();
    });

    // ... rest of the code

});
