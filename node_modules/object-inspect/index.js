const hasMap = typeof Map === 'function' && Map.prototype;
const mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;
const mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;
const mapForEach = hasMap && Map.prototype.forEach;
const hasSet = typeof Set === 'function' && Set.prototype;
const setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;
const setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;
const setForEach = hasSet && Set.prototype.forEach;
const hasWeakMap = typeof WeakMap === 'function' && WeakMap.prototype;
const weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
const hasWeakSet = typeof WeakSet === 'function' && WeakSet.prototype;
const weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
const hasWeakRef = typeof WeakRef === 'function' && WeakRef.prototype;
const weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;
const booleanValueOf = Boolean.prototype.valueOf;
const objectToString = Object.prototype.toString;
const functionToString = Function.prototype.toString;
const $match = String.prototype.match;
const $slice = String.prototype.slice;
const $replace = String.prototype.replace;
const $toUpperCase = String.prototype.toUpperCase;
const $toLowerCase = String.prototype.toLowerCase;
const $test = RegExp.prototype.test;
const $concat = Array.prototype.concat;
const $join = Array.prototype.join;
const $arrSlice = Array.prototype.slice;
const $floor = Math.floor;
const bigIntValueOf = typeof BigInt === 'function' ? BigInt.prototype.valueOf : null;
const gOPS = Object.getOwnPropertySymbols;
const symToString = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? Symbol.prototype.toString : null;
const hasShammedSymbols = typeof Symbol === 'function' && typeof Symbol.iterator === 'object';
const toStringTag = typeof Symbol === 'function' && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? 'object' : 'symbol')
    ? Symbol.toStringTag
    : null;
const isEnumerable = Object.prototype.propertyIsEnumerable;

const gPO = (typeof Reflect === 'function' ? Reflect.getPrototypeOf : Object.getPrototypeOf) || (
    [].__proto__ === Array.prototype // eslint-disable-line no-proto
        ? function (O) {
            return O.__proto__; // eslint-disable-line no-proto
        }
        : null
);

const addNumericSeparator = (num, str) => {
    if (
        num === Infinity
        || num === -Infinity
        || num !== num
        || (num && num > -1000 && num < 1000)
        || $test.call(/e/, str)
    ) {
        return str;
    }
    const sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;
    if (typeof num === 'number') {
        const int = num < 0 ? -$floor(-num) : $floor(num); // trunc(num)
        if (int !== num) {
            const intStr = String(int);
            const dec = $slice.call(str, intStr.length + 1);
            return $replace.call(intStr, sepRegex, '$&_') + '.' + $replace.call($replace.call(dec, /([0-9]{3})/g, '$&_'), /_$/, '');
        }
    }
    return $replace.call(str, sepRegex, '$&_');
}

const utilInspect = require('./util.inspect');
const inspectCustom = utilInspect.custom;
const inspectSymbol = isSymbol(inspectCustom) ? inspectCustom : null;

const inspect = (obj, options, depth, seen) => {
    const opts = options || {};

    if (has(opts, 'quoteStyle') && (opts.quoteStyle !== 'single' && opts.quoteStyle !== 'double')) {
        throw new TypeError('option "quoteStyle" must be "single" or "double"');
    }
    if (
        has(opts, 'maxStringLength') && (typeof opts.maxStringLength === 'number'
            ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity
            : opts.maxStringLength !== null
        )
    ) {
        throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
    }
    const customInspect = has(opts, 'customInspect') ? opts.customInspect : true;
    if (typeof customInspect !== 'boolean' && customInspect !== 'symbol') {
        throw new TypeError('option "customInspect", if provided, must be `true`, `false`, or `\'symbol\'`');
    }

    if (
        has(opts, 'indent')
        && opts.indent !== null
        && opts.indent !== '\t'
        && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)
    ) {
        throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');
    }
    if (has(opts, 'numericSeparator') && typeof opts.numericSeparator !== 'boolean') {
        throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');
    }
    const numericSeparator = opts.numericSeparator;

    if (typeof obj === 'undefined') {
        return 'undefined';
    }
    if (obj === null) {
        return 'null';
    }
    if (typeof obj === 'boolean') {
        return obj ? 'true' : 'false';
