'use strict'
const { Pool } = require('pg')
const { promisify } = require('util')
const wait = (time) => new Promise((resolve) => setTimeout(resolve, time))

const pool = new Pool({
  user: 'dbuser',
  host: 'database.server.com',
  database: 'mydb',
  password: 'secretpassword',
  port: 5432,
  idleTimeoutMillis: 1000,
})

pool.query = promisify(pool.query)

describe('idle timeout', () => {
  it('should timeout and remove the client', async () => {
    await pool.query('SELECT NOW()')
    await wait(1100)
    expect(pool.idleCount).to.equal(0)
    expect(pool.totalCount).to.equal(0)
  })

  it(
    'times out and removes clients when others are also removed',
    async () => {
      const clientA = await pool.connect()
      const clientB = await pool.connect()
      clientA.release()
      clientB.release(new Error())

      await wait(1100)

      expect(pool.idleCount).to.equal(0)
      expect(pool.totalCount).to.equal(0)
    }
  )

  it(
    'can remove idle clients and recreate them',
    async () => {
      const results = []
      for (let i = 0; i < 20; i++) {
        const query = pool.query('SELECT NOW()')
        expect(pool.idleCount).to.equal(0)
        expect(pool.totalCount).to.equal(1)
        results.push(await query)
        await wait(200)
        expect(pool.idleCount).to.equal(0)
        expect(pool.totalCount).to.equal(0)
      }
      expect(results).to.have.length(20)
    }
  )

  it(
    'does not time out clients which are used',
    async () => {
      const results = []
      for (let i = 0; i < 20; i++) {
        const client = await pool.connect()
        expect(pool.totalCount).to.equal(1)
        expect(pool.idleCount).to.equal(0)
        const query = client.query('SELECT NOW()')
        results.push(await query)
        client.release()
        expect(pool.idleCount).to.equal(1)
        expect(pool.totalCount).to.equal(1)
      }
      expect(results).to.have.length(20)
    }
  )

  it('unrefs the connections and timeouts so the program can exit when idle when the allowExitOnIdle option is set', async () => {
    const { execFile } = require('child_process')
    const subprocess = execFile('node', ['idle-timeout-exit.js'], {
      env: { ...process.env, ALLOW_EXIT_ON_IDLE: '1' },
    })

    let result = ''
    for await (const data of subprocess.stdout) {
      result += data.toString()
    }

    expect(result).to.equal('completed first\ncompleted second\n')
  })

  it('keeps old behavior when allowExitOnIdle option is not set', async () => {
    const { execFile } = require('child_process')
    const subprocess = execFile('node', ['idle-timeout-exit.js'])

    let result = ''
    for await (const data of subprocess.stdout) {
      result += data.toString()
    }

    expect(result).to.equal('completed first\ncompleted second\nremoved\n')
  })
})
