import * as assert from 'assert';
import { PassThrough } from 'stream';
import { parse } from './inbound-parser';
import {
  testBuffers,
  bufferList,
  assertBufferListEqual,
  assertBufferEqual,
  assertMessageEqual,
  assertMessageListEqual,
} from './testing/test-buffers';
import {
  expectedAuthenticationOkayMessage,
  expectedParameterStatusMessage,
  expectedBackendKeyDataMessage,
  expectedReadyForQueryMessage,
  expectedCommandCompleteMessage,
  expectedEmptyRowDescriptionMessage,
  expectedOneRowMessage,
  expectedTwoRowMessage,
  expectedEmptyParameterDescriptionMessage,
  expectedOneParameterMessage,
  expectedTwoParameterMessage,
  expectedPlainPasswordMessage,
  expectedMD5PasswordMessage,
  expectedSASLMessage,
  expectedSASLContinueMessage,
  expectedSASLFinalMessage,
  expectedNotificationResponseMessage,
  expectedErrorMessage,
  expectedParseCompleteMessage,
  expectedBindCompleteMessage,
  expectedPortalSuspendedMessage,
  expectedReplicationStartMessage,
  expectedCopyInResponseMessage,
  expectedCopyOutResponseMessage,
  expectedCopyDoneMessage,
  expectedCopyDataMessage,
} from './testing/expected-messages';

describe('PgPacketStream', () => {
  const parseBuffers = (buffers: Buffer[]) =>
    new Promise<pg.Message[]>((resolve, reject) => {
      const stream = new PassThrough();
      for (const buffer of buffers) {
        stream.write(buffer);
      }
      stream.end();
      const messages: pg.Message[] = [];
      parse(stream, (msg) => messages.push(msg));
      stream.on('error', reject);
      stream.on('end', () => resolve(messages));
    });

  it('recieves and parses authenticationOk', () =>
    parseBuffers([testBuffers.authenticationOk()]).then((messages) =>
      assertMessageEqual(messages[0], expectedAuthenticationOkayMessage),
    ));

  it('recieves and parses parameterStatus', () =>
    parseBuffers([testBuffers.parameterStatus('client_encoding', 'UTF8')]).then((messages) =>
      assertMessageEqual(messages[0], expectedParameterStatusMessage),
    ));

  it('recieves and parses backendKeyData', () =>
    parseBuffers([testBuffers.backendKeyData(1, 2)]).then((messages) =>
      assertMessageEqual(messages[0], expectedBackendKeyDataMessage),
    ));

  it('recieves and parses readyForQuery', () =>
    parseBuffers([testBuffers.readyForQuery()]).then((messages) =>
      assertMessageEqual(messages[0], expectedReadyForQueryMessage),
    ));

  it('recieves and parses commandComplete', () =>
    parseBuffers([testBuffers.commandComplete('SELECT 3')]).then((messages) =>
      assertMessageEqual(messages[0], expectedCommandCompleteMessage),
    ));

  it('recieves and parses empty rowDescription', () =>
    parseBuffers([testBuffers.rowDescription([])]).then((messages) =>
      assertMessageEqual(messages[0], expectedEmptyRowDescriptionMessage),
    ));

  it('recieves and parses one rowDescription', () =>
    parseBuffers([testBuffers.rowDescription([{ name: 'id', tableID: 1, columnID: 2 }])]).then((messages) =>
      assertMessageEqual(messages[0], expectedOneRowMessage),
    ));

  it('recieves and parses two rowDescriptions', () =>
    parseBuffers([
      testBuffers.rowDescription([
        { name: 'bang', tableID: 1, columnID: 2 },
        { name: 'whoah', tableID: 10, columnID: 11 },
      ]),
    ]).then((messages) =>
      assertMessageEqual(messages[0], expectedTwoRowMessage),
    ));

  it('recieves and parses empty parameterDescription', () =>
    parseBuffers([testBuffers.parameterDescription([])]).then((messages) =>
      assertMessageEqual(messages[0], expectedEmptyParameterDescriptionMessage),
    ));

  it('recieves and parses one parameterDescription', () =>
    parseBuffers([testBuffers.parameterDescription([1111])]).then((messages) =>
      assertMessageEqual(messages[0], expectedOneParameterMessage),
    ));

  it('recieves and parses two parameterDescriptions', () =>
    parseBuffers([testBuffers.parameterDescription([2222, 3333])]).then((messages) =>
      assertMessageEqual(messages[0], expectedTwoParameterMessage),
    ));

  it('recieves and parses authenticationCleartextPassword', () =>
    parseBuffers([testBuffers.authenticationCleartextPassword()]).then((messages) =>
      assertMessageEqual(messages[0], expectedPlainPasswordMessage),
    ));

  it('recieves and parses authenticationMD5Password', () =>
    parseBuffers([testBuffers.authenticationMD5Password()]).then((messages) =>
      assertMessageEqual(messages[0], expectedMD5PasswordMessage),
    ));

  it('recieves and parses authenticationSASL', () =>
    parseBuffers([testBuffers.authenticationSASL()]).then((messages) =>
      assertMessageEqual(messages[0], expectedSASLMessage),
    ));

  it('recieves and parses authenticationSASLContinue', () =>
    parseBuffers([testBuffers.authenticationSASLContinue()]).then((messages) =>
      assertMessageEqual(messages[0], expectedSASLContinueMessage),
    ));

  it('recieves and parses authenticationSASLFinal', () =>
    parseBuffers([testBuffers.authenticationSASLFinal()]).then((messages) =>
      assertMessageEqual(messages[0], expectedSASLFinalMessage),
    ));

  it('recieves and parses notification', () =>
    parseBuffers([testBuffers.notification(4, 'hi', 'boom')]).then((messages) =>
      assertMessageEqual(messages[0], expectedNotification
