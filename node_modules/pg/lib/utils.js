// utils.js

/**
 * Escapes an element for use in a JSON string.
 * @param {string} elementRepresentation - The element to escape.
 * @returns {string} The escaped element.
 */
function escapeElement(elementRepresentation) {
  return '"' + elementRepresentation.replace(/\\/g, '\\\\').replace(/"/g, '\\"') + '"'
}

/**
 * Converts a JS array to a PostgreSQL array literal.
 * @param {Array<*>} val - The array to convert.
 * @returns {string} The array literal.
 */
function arrayString(val) {
  let result = '{'
  for (let i = 0; i < val.length; i++) {
    if (i > 0) {
      result = result + ','
    }
    if (val[i] === null || typeof val[i] === 'undefined') {
      result = result + 'NULL'
    } else if (Array.isArray(val[i])) {
      result = result + arrayString(val[i])
    } else if (val[i] instanceof Buffer) {
      result += '\\\\x' + val[i].toString('hex')
    } else {
      result += escapeElement(prepareValue(val[i]))
    }
  }
  result = result + '}'
  return result
}

module.exports = {
  escapeElement,
  arrayString,
}


// index.js

/**
 * Converts values from javascript types to their 'raw' counterparts for use as a PostgreSQL parameter.
 * @param {*} val - The value to convert.
 * @param {Array<*>} seen - The array of seen objects to prevent circular references.
 * @returns {*} The converted value.
 */
function prepareValue(val, seen = []) {
  // null and undefined are both null for postgres
  if (val == null) {
    return null
  }
  if (val instanceof Buffer) {
    return val
  }
  if (TypedArray.prototype.isView(val)) {
    const buf = Buffer.from(val.buffer, val.byteOffset, val.byteLength)
    if (buf.length === val.byteLength) {
      return buf
    }
    return buf.slice(val.byteOffset, val.byteOffset + val.byteLength) // Node.js v4 does not support those Buffer.from params
  }
  if (val instanceof Date) {
    if (defaults.parseInputDatesAsUTC) {
      return val.toISOString()
    } else {
      return val.toISOString().replace('Z', '')
    }
  }
  if (Array.isArray(val)) {
    return arrayString(val)
  }
  if (typeof val === 'object') {
    return JSON.stringify(val)
  }
  return val.toString()
}

// ...

module.exports = {
  prepareValue,
  // ...
}
