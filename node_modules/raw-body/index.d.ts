import { Readable } from 'stream';

declare namespace getRawBody {
  export type Encoding = string | true;

  export interface Options {
    length?: number | string | null;
    limit?: number | string | null;
    encoding?: Encoding | null;
  }

  export interface RawBodyError extends Error {
    limit?: number;
    length?: number;
    expected?: number;
    received?: number;
    encoding?: string;
    status: number;
    statusCode: number;
    type: string;
  }
}

/**
 * Gets the entire buffer of a stream either as a `Buffer` or a string.
 * Validates the stream's length against an expected length and maximum
 * limit. Ideal for parsing request bodies.
 */
declare function getRawBody(
  stream: Readable,
  callback?: (err: getRawBody.RawBodyError, body: Buffer | string) => void
): Promise<Buffer | string>;

declare function getRawBody(
  stream: Readable,
  options: getRawBody.Options & { encoding: getRawBody.Encoding },
  callback?: (err: getRawBody.RawBodyError, body: string) => void
): void;

declare function getRawBody(
  stream: Readable,
  options?: getRawBody.Options
): Promise<Buffer>;

declare function getRawBody(
  stream: Readable,
  options: getRawBody.Options,
  callback?: (err: getRawBody.RawBodyError, body: Buffer) => void
): void;

export = getRawBody;
