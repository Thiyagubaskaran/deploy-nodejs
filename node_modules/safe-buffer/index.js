/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */

/* eslint-disable node/no-deprecated-api */

// Use the built-in Buffer if available, otherwise use the polyfill
const Buffer = (typeof buffer !== 'undefined' && buffer.Buffer) || require('buffer').Buffer;

// alternative to using Object.keys for old browsers
const copyProps = (src, dst) => {
  for (const key in src) {
    dst[key] = src[key];
  }
};

if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = Buffer;
} else {
  // Copy properties from require('buffer')
  copyProps(Buffer, exports);
  exports.Buffer = SafeBuffer;
}

function SafeBuffer(arg, encodingOrOffset, length) {
  return new Buffer(arg, encodingOrOffset, length);
}

// Set the prototype explicitly
SafeBuffer.prototype = Object.create(Buffer.prototype);

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer);

SafeBuffer.from = (arg, encodingOrOffset, length) => {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number');
  }
  return new Buffer(arg, encodingOrOffset, length);
};

SafeBuffer.alloc = (size, fill, encoding) => {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number');
  }
  const buf = new Buffer(size);
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding);
    } else {
      buf.fill(fill);
    }
  } else {
    buf.fill(0);
  }
  return buf;
};

SafeBuffer.allocUnsafe = (size) => {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number');
  }
  return new Buffer(size);
};

SafeBuffer.allocUnsafeSlow = (size) => {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number');
  }
  return new Buffer.SlowBuffer(size);
};
