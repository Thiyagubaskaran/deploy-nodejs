/* eslint-disable node/no-deprecated-api */

'use strict'

const test = require('tape')
const buffer = require('buffer')
const safer = require('./safer')
const dangerous = require('./dangerous')

test('Constructor tests', function (t) {
  t.equal(buffer.Buffer, safer.Buffer, 'safer.Buffer is buffer.Buffer')
  t.equal(buffer.Buffer, dangerous.Buffer, 'dangerous.Buffer is buffer.Buffer')
  t.equal(safer.Buffer, dangerous.Buffer, 'safer.Buffer is dangerous.Buffer')

  t.throws(function () { new buffer.Buffer() }, 'throws on no arguments')
  t.throws(function () { new buffer.Buffer(0) }, 'throws on length 0')
  t.throws(function () { new buffer.Buffer('a') }, 'throws on string')
  t.throws(function () { new buffer.Buffer('a', 'utf-8') }, 'throws on string and encoding')
  t.throws(function () { new safer.Buffer() }, 'throws on no arguments')
  t.throws(function () { new safer.Buffer(0) }, 'throws on length 0')
  t.throws(function () { new safer.Buffer('a') }, 'throws on string')
  t.throws(function () { new safer.Buffer('a', 'utf-8') }, 'throws on string and encoding')
  t.throws(function () { new dangerous.Buffer() }, 'throws on no arguments')
  t.throws(function () { new dangerous.Buffer(0) }, 'throws on length 0')
  t.throws(function () { new dangerous.Buffer('a') }, 'throws on string')
  t.throws(function () { new dangerous.Buffer('a', 'utf-8') }, 'throws on string and encoding')

  t.end()
})

test('Methods tests', function (t) {
  t.equal(buffer.Buffer.alloc, safer.Buffer.alloc, 'safer.Buffer.alloc is buffer.Buffer.alloc')
  t.equal(buffer.Buffer.alloc, dangerous.Buffer.alloc, 'dangerous.Buffer.alloc is buffer.Buffer.alloc')
  t.equal(safer.Buffer.alloc, dangerous.Buffer.alloc, 'safer.Buffer.alloc is dangerous.Buffer.alloc')

  t.throws(function () { buffer.Buffer.alloc() }, 'throws on no arguments')
  t.throws(function () { buffer.Buffer.alloc(0) }, 'throws on length 0')
  t.throws(function () { buffer.Buffer.alloc(0, 10) }, 'throws on fill 0')
  t.throws(function () { buffer.Buffer.alloc(0, 'a') }, 'throws on fill string')
  t.throws(function () { buffer.Buffer.alloc(10) }, 'throws on length 10')
  t.throws(function () { buffer.Buffer.alloc(10, 10) }, 'throws on fill 10')
  t.throws(function () { buffer.Buffer.alloc(10, 'a') }, 'throws on fill string')
  t.throws(function () { buffer.Buffer.alloc(9, 'ab') }, 'throws on fill string and length 9')
  t.throws(function () { buffer.Buffer.allocUnsafe() }, 'throws on no arguments')
  t.throws(function () { buffer.Buffer.allocUnsafe(0) }, 'throws on length 0')
  t.throws(function () { buffer.Buffer.allocUnsafe(0, 10) }, 'throws on fill 0')
  t.throws(function () { buffer.Buffer.allocUnsafe(0, 'a') }, 'throws on fill string')
  t.throws(function () { buffer.Buffer.allocUnsafe(10) }, 'throws on length 10')
  t.throws(function () { buffer.Buffer.allocUnsafe(10, 10) }, 'throws on fill 10')
  t.throws(function () { buffer.Buffer.allocUnsafe(10, 'a') }, 'throws on fill string')
  t.throws(function () { buffer.Buffer.allocUnsafe(9, 'ab') }, 'throws
